generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  email        String        @unique
  name         String
  avatar       String?
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Session      Session[]
  blogs        Blog[]        @relation("AccountBlogs")
  blogComments CommentBlog[] @relation("AccountCommentBlog")
  blogEmotions EmotionBlog[] @relation("AccountBlogEmotions")
  role         String        @default("User")
}

model Session {
  token     String   @id @map("_id")
  accountId String   @db.ObjectId
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  name        String
  description String
  price       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BlogCategory {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  name      String           @unique
  image     String
  blogs     BlogToCategory[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model TagBlog {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String      @unique
  blogs     BlogToTag[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model BlogToCategory {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  blogId     String       @db.ObjectId
  categoryId String       @db.ObjectId
  blog       Blog         @relation(fields: [blogId], references: [id],onDelete: Cascade)
  category   BlogCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model BlogToTag {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  blogId String  @db.ObjectId
  tagId  String  @db.ObjectId
  blog   Blog    @relation(fields: [blogId], references: [id] , onDelete: Cascade)
  tag    TagBlog @relation(fields: [tagId], references: [id] , onDelete: Cascade)
}

model Blog {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  views      Int           @default(0)
  categories BlogToCategory[] 
  tags       BlogToTag[]
  comments   CommentBlog[]    @relation("BlogToCommentBlog")
  postById   String           @db.ObjectId
  postBy     Account          @relation("AccountBlogs", fields: [postById], references: [id])
  emotions   EmotionBlog[]    @relation("BlogEmotions")
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model CommentBlog {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  blogId    String        @db.ObjectId
  blog      Blog          @relation("BlogToCommentBlog", fields: [blogId], references: [id], onDelete: Cascade)
  postById  String        @db.ObjectId
  postBy    Account       @relation("AccountCommentBlog", fields: [postById], references: [id], onDelete: Cascade)
  parentId  String?       @db.ObjectId
  parent    CommentBlog?  @relation("CommentBlogReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   CommentBlog[] @relation("CommentBlogReplies")
  emotions  EmotionBlog[] @relation("CommentBlogEmotions")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model EmotionBlog {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  blogId    String?      @db.ObjectId
  blog      Blog?        @relation("BlogEmotions", fields: [blogId], references: [id], onDelete: Cascade)
  commentId String?      @db.ObjectId
  comment   CommentBlog? @relation("CommentBlogEmotions", fields: [commentId], references: [id], onDelete: Cascade)
  postById  String      @db.ObjectId
  postBy    Account     @relation("AccountBlogEmotions", fields: [postById], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime      @updatedAt
}
